"use strict";(self.webpackChunkskydev=self.webpackChunkskydev||[]).push([[5123],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>h});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(o),h=n,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return o?r.createElement(m,i(i({ref:t},p),{},{components:o})):r.createElement(m,i({ref:t},p))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},9154:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:13},i="Topological sorting",l={unversionedId:"DSA/Topological_Sorting",id:"DSA/Topological_Sorting",title:"Topological sorting",description:"Introducton",source:"@site/docs/DSA/Topological_Sorting.md",sourceDirName:"DSA",slug:"/DSA/Topological_Sorting",permalink:"/docs/DSA/Topological_Sorting",draft:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Graphs",permalink:"/docs/DSA/Graphs"},next:{title:"Greedy Algorithm",permalink:"/docs/DSA/Greedy_Algorithm"}},s={},c=[{value:"Introducton",id:"introducton",level:2},{value:"Resources",id:"resources",level:2},{value:"Questions",id:"questions",level:2}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"topological-sorting"},"Topological sorting"),(0,n.kt)("h2",{id:"introducton"},"Introducton"),(0,n.kt)("p",null,"The name suggests sorting, so it probably should be :P. Here\u2019s the definition: \u201ctopological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u\nto vertex v, u comes before v in the ordering\u201d",(0,n.kt)("br",{parentName:"p"}),"\n","In simple words, we need to sort then in such a way that that the \u2018prerequisite\u2019 comes before all the others and we have a directed structure from one node to another."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Topo Sort",src:o(9616).Z,width:"407",height:"331"})),(0,n.kt)("p",null,"Let\u2019s understand this with CLASSES at your school/college/university. You have to take calculus before taking advanced mathematics and you have to take basic programming before moving forward -> that\u2019s topological sorting. You can make your class schedule using this algorithm.",(0,n.kt)("br",{parentName:"p"}),"\n","Let\u2019s convert this to code, step by step.\nFirstly, we want to cover all the nodes so we can use a stack or queue. It\u2019s a DAG and we\u2019re concerned about the depth, so let\u2019s use a stack. Queue is also an option here. We have an array given to us, let\u2019s iterate over that -> go as deep as possible and add that to our set. We want to go to the last node and begin from there."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"L \u2190 Empty list that will contain the sorted elements\nS \u2190 Set of all nodes with no incoming edge\nwhile S is not empty do\nremove a node n from S\nadd n to L\nfor each node m with an edge e from n to m do\nremove edge e from the graph\nif m has no other incoming edges then\ninsert m into S\nif graph has edges then\nreturn error (graph has at least one cycle)\nelse\nreturn L (a topologically sorted order)\n")),(0,n.kt)("p",null,"Removing edge means marking it visited and never coming back to it again. So here\u2019s what the first thing looks like."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"for(int i=0; i < nodes.length; i++){\nif(visited[i] == false){\nvisited[i] = true;\ntoposort(i, visited, adj, s);\n}\n}\n// Print the stack here -> it\u2019s sorted!\n")),(0,n.kt)("p",null,"We have to define toposort() which does the same thing -> takes the pointer to the very last node, adds\nit to the stack, marks them visited along the way, and then eventually fills up the array. Here\u2019s the\ntoposort function:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"toposort(int i, boolean visited[], adj[][], Stack<> stack){\n for(int x : adj.get(i)){\n if(visited[x] == false){\n visited[x] = true;\n toposort(x, visited, adj, stack);\n }\n }\n stack.push(i);\n}\n")),(0,n.kt)("p",null,"After filling up the stack, we print out all the items from that in a sorted form. "),(0,n.kt)("h2",{id:"resources"},"Resources"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://youtu.be/rG2-_lgcZzo"},"- Topological Sort Graph | Leetcode 207 | Course Schedule")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://medium.com/@yzhua3/leetcode-course-schedule-642d91dbd425"}," [LeetCode]Course Schedule. May 30-Day Challenge | by Yinfang")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Topological_sorting"},"Definition: Wikipedia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://algorithm-visualizer.org/branch-and-bound/topological-sort"},"Visualizer: Branch and Bound - Topological Sort")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://youtu.be/eL-KzMXSXXI"}," Topological Sort Algorithm | Graph Theory")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://youtu.be/cIBFEhD77b4"}," Topological Sort | Kahn's Algorithm | Graph Theory"))),(0,n.kt)("h2",{id:"questions"},"Questions"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://leetcode.com/tag/topological-sort/"},"Topological Sort")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/find-the-town-judge/"},"Leetcode : Find the Town Judge")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/course-schedule-ii/"},"LeetCode 210. Course Schedule II"))))}d.isMDXComponent=!0},9616:(e,t,o)=>{o.d(t,{Z:()=>r});const r=o.p+"assets/images/Topo_Sort-ece5a8dc1ed5854afc18f055dbe168cb.png"}}]);