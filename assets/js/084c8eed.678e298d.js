"use strict";(self.webpackChunkskydev=self.webpackChunkskydev||[]).push([[2934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(k,a(a({ref:t},c),{},{components:n})):i.createElement(k,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<o;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},a="LinkedList",s={unversionedId:"DSA/LinkedList",id:"DSA/LinkedList",title:"LinkedList",description:"Introduction",source:"@site/docs/DSA/LinkedList.md",sourceDirName:"DSA",slug:"/DSA/LinkedList",permalink:"/Skydev/docs/DSA/LinkedList",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"2 Pointers",permalink:"/Skydev/docs/DSA/Twopointers"},next:{title:"Sliding Window",permalink:"/Skydev/docs/DSA/Sliding_Window"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Resources",id:"resources",level:2},{value:"Videos",id:"videos",level:2},{value:"Questions",id:"questions",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"linkedlist"},"LinkedList"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"A linked list is a data structure that stores objects in snake-like nodes. We have nodes in the linked list instead of an array (where we have a simple list to store something). But it's the same thing; you can store whatever you want - objects, numbers, strings, and so on.",(0,r.kt)("br",{parentName:"p"}),"\n","The only difference is in the way it\u2019s represented. It\u2019s like a snake: with a head and tail, and you can only access one thing at a time - giving its own advantages and disadvantages. So if you want to access the 5th thing, you can\u2019t do linked_list","[5]",", instead -> you would have to iterate over the list from the beginning and then stop when the number hits 5."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gist.github.com/aryansingh12/aee29904dfaab092c79d8298c4a874ce"},"Linked list: Methods")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://towardsdatascience.com/how-i-taught-myself-linked-lists-72c4837ea721"},"How I Taught Myself Linked Lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.cse.iitm.ac.in/~cs2110/Lab_3/LinkedListIntro.pdf"}," Introduction to Linked List"))),(0,r.kt)("h2",{id:"videos"},"Videos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=njTh_OwMljA"},"Data Structures: Linked Lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=i7v1UWlaYrI&list=PLNmW52ef0uwsqn4haINljAFDivH1zhqxF"},"Interview Question: Nth-to-last Linked List Element"))),(0,r.kt)("h2",{id:"questions"},"Questions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/linked-list-cycle/"},"Linked List Cycle (Leetcode)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/delete-node-in-a-linked-list/"},'Delete Node in a Linked List"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/remove-nth-node-from-end-of-list/"},"Remove Nth Node From End of List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/merge-two-sorted-lists/"},"Merge Two Sorted Lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/palindrome-linked-list/"},"Palindrome Linked List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/linked-list-cycle/"},"Linked List Cycle (Leetcode)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/intersection-of-two-linked-lists/"},"Intersection of Two Linked Lists")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/remove-linked-list-elements/"},"Remove Linked List Elements")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/middle-of-the-linked-list/"},"Middle of the Linked List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/merge-k-sorted-lists/"},"Merge k Sorted Lists"))))}p.isMDXComponent=!0}}]);