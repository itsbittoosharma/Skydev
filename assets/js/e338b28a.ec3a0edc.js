"use strict";(self.webpackChunkskydev=self.webpackChunkskydev||[]).push([[8138],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9421:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:8},i="Backtracking",l={unversionedId:"DSA/Backtrack",id:"DSA/Backtrack",title:"Backtracking",description:"Introduction",source:"@site/docs/DSA/Backtrack.md",sourceDirName:"DSA",slug:"/DSA/Backtrack",permalink:"/docs/DSA/Backtrack",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Recursion",permalink:"/docs/DSA/Recursion"},next:{title:"BFS_DFS",permalink:"/docs/DSA/BFS_DFS"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Memoization",id:"memoization",level:2},{value:"Resources",id:"resources",level:2},{value:"Questions",id:"questions",level:2}],m={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"backtracking"},"Backtracking"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Backtracking can be thought of as a more efficient version of brute force. Brute force methods consider every possibility. Backtracking means stopping evaluating a possibility as soon as it violates some constraint in the problem, taking a step back, and trying other possible cases to see if they lead to a valid solution.\nConsider backtracking as searching for all possible solutions. You go to a place, nothing happens, so you go back and visit other places.  "),(0,r.kt)("p",null,"Here\u2019s a nice way to think of any problem:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recognize the pattern "),(0,r.kt)("li",{parentName:"ul"},"Think of a human way to solve it"),(0,r.kt)("li",{parentName:"ul"},"Convert it into code")),(0,r.kt)("h2",{id:"memoization"},"Memoization"),(0,r.kt)("p",null,"Memoization means storing a repetitive value, so that we can use it for later. A really nice example here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you want to climb Mount Everest, you can recursively climb the smaller parts until you reach\nthe top. The base case would be the top, and you would have a recursive function climb() which\ndoes the job."),(0,r.kt)("li",{parentName:"ul"},"Imagine if there are 4 camps to Mount Everest, your recursive function would make you climb\nthe first one, then both 1 and 2, then 1-2-3 and so on. This would be tiring, cost more, and a lot of unnecessary work. Why would you repeat the work you\u2019ve already done? This is where\nmemoization comes in."),(0,r.kt)("li",{parentName:"ul"},"If you use memoization, you would store your camp ground once you reach it, so the next time\nyour recursive function works, it\u2019ll get the camp ground value from the stored set.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function(i, value, something...){\n if base_case:\n do something\n if stored_value[i]:\n return stored_value[i]\n // do something (recursive call)\n stored_value[i] = value\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Dynamic programming")," is Backtracking + Memoization. That\u2019s it. Every problem is a part of this\nalgorithm -> explore all possible ways and then optimize them in such a way that we don\u2019t explore\nalready explored paths. Stop solving dynamic programming problems the iterative way. Practice tons of recursion + backtracking problems, and then go the iterative way."),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/nerd-for-tech/a-deep-study-and-analysis-of-recursive-approach-and-dynamic-programming-by-solving-the-most-8567b56de2b1"},"A deep study and analysis of Recursive approach and Dynamic Programming")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/leetcode-patterns/leetcode-pattern-3-backtracking-5d9e5a03dc26"},"Leetcode Pattern 3 | Backtracking | by csgator | Leetcode Patterns")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/subsets/discuss/27281/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning"},"A general approach to backtracking questions in Java (Subsets, Permutations, Combination Sum,Palindrome Partitioning)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://chialunwu.medium.com/wtf-is-memoization-a2979594fb2a"},"WTF is Memoization.| by Leo Wu | Medium"))),(0,r.kt)("h2",{id:"questions"},"Questions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/word-search/"},"Word Search")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/subsets/"},"Subsets")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/letter-case-permutation/"},"Letter Case Permutation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/letter-combinations-of-a-phone-number/"},"Letter Combinations of a Phone Number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/combinations/"},"Combinations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/combination-sum/"},"Combination Sum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/combination-sum-ii/"}," Leetcode - Combination Sum II")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/combination-sum-iii/"},"Combination Sum III")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/combination-sum-iv/"}," Combination Sum IV")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/permutations/"},"Permutations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/permutations-ii/"},"Permutations II")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/next-permutation/"},"Next Permutation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/n-queens/description/"},"N-Queens"))))}u.isMDXComponent=!0}}]);