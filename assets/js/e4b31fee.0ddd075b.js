"use strict";(self.webpackChunkskydev=self.webpackChunkskydev||[]).push([[4869],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>y});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},s=Object.keys(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(r=0;r<s.length;r++)n=s[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=r.createContext({}),l=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},h=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,s=t.originalType,i=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),h=l(n),y=o,m=h["".concat(i,".").concat(y)]||h[y]||p[y]||s;return n?r.createElement(m,a(a({ref:e},u),{},{components:n})):r.createElement(m,a({ref:e},u))}));function y(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var s=n.length,a=new Array(s);a[0]=h;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:o,a[1]=c;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5241:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const s={},a=void 0,c={unversionedId:"OOPS/Constructor",id:"OOPS/Constructor",title:"Constructor",description:"What is a constructor?",source:"@site/docs/OOPS/Constructor.md",sourceDirName:"OOPS",slug:"/OOPS/Constructor",permalink:"/Skydev/docs/OOPS/Constructor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Abstraction",permalink:"/Skydev/docs/OOPS/Abstraction"},next:{title:"Destructor",permalink:"/Skydev/docs/OOPS/Destructor"}},i={},l=[{value:"What is a constructor?",id:"what-is-a-constructor",level:2},{value:"What are the various types of constructors in C++?",id:"what-are-the-various-types-of-constructors-in-c",level:4},{value:"What is a copy constructor?",id:"what-is-a-copy-constructor",level:3}],u={toc:l};function p(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-a-constructor"},"What is a constructor?"),(0,o.kt)("p",null,"Constructors are special methods whose name is the same as the class name. The\nconstructors serve the special purpose of initializing the objects.\nFor example, suppose there is a class with the name \u201cMyClass\u201d, then when you\ninstantiate this class, you pass the syntax:\nMyClass myClassObject = new MyClass();\nNow here, the method called aConstructors are special methods whose name is the same as the class name. The\nconstructors serve the special purpose of initializing the objects.\nFor example, suppose there is a class with the name \u201cMyClass\u201d, then when you\ninstantiate this class, you pass the syntax:\nMyClass myClassObject = new MyClass();\nNow here, the method."),(0,o.kt)("h4",{id:"what-are-the-various-types-of-constructors-in-c"},"What are the various types of constructors in C++?"),(0,o.kt)("p",null,"The most common classification of constructors includes:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Default constructor: The default constructor is the constructor which doesn\u2019t take\nany argument. It has no parameters.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class ABC\n{\nint x;\nABC()\n{\nx = 0;\n}\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Parameterized constructor: The constructors that take some arguments are known\nas parameterized constructors")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class ABC\n{\nint x;\nABC(int y)\n{\nx = y;\n}\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Copy constructor: A copy constructor is a member function that initializes an object\nusing another object of the same class.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class ABC\n{\nint x;\nABC(int y)\n{\nx = y;\n}\n// Copy constructor\nABC(ABC abc)\n{\nx = abc.x;\n}\n}\n")),(0,o.kt)("h3",{id:"what-is-a-copy-constructor"},"What is a copy constructor?"),(0,o.kt)("p",null,"Copy Constructor is a type of constructor, whose purpose is to copy an object to\nanother. What it means is that a copy constructor will clone an object and its values,\ninto another object, is provided that both the objects are of the same class."))}p.isMDXComponent=!0}}]);